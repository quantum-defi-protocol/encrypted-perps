import { TfheCompactPublicKey } from 'node-tfhe';
export type ZKInput = {
    addBool: (value: boolean) => ZKInput;
    add4: (value: number | bigint) => ZKInput;
    add8: (value: number | bigint) => ZKInput;
    add16: (value: number | bigint) => ZKInput;
    add32: (value: number | bigint) => ZKInput;
    add64: (value: number | bigint) => ZKInput;
    add128: (value: number | bigint) => ZKInput;
    addAddress: (value: string) => ZKInput;
    getValues: () => bigint[];
    getBits: () => number[];
    resetValues: () => ZKInput;
    encrypt: () => {
        handles: Uint8Array[];
        inputProof: Uint8Array;
    };
    send: () => Promise<{
        handles: Uint8Array[];
        inputProof: Uint8Array;
    }>;
};
export declare const createEncryptedInput: (tfheCompactPublicKey?: TfheCompactPublicKey, coprocessorUrl?: string) => (contractAddress: string, callerAddress: string) => {
    addBool(value: boolean | number | bigint): any;
    add4(value: number | bigint): any;
    add8(value: number | bigint): any;
    add16(value: number | bigint): any;
    add32(value: number | bigint): any;
    add64(value: number | bigint): any;
    add128(value: number | bigint): any;
    addAddress(value: string): any;
    addBytes256(value: Uint8Array): any;
    getValues(): bigint[];
    getBits(): (1 | 16 | 8 | 64 | 4 | 32 | 128 | 160 | 256 | 512 | 1024 | 2048)[];
    resetValues(): any;
    encrypt(): {
        handles: Uint8Array[];
        inputProof: Uint8Array;
    };
    send(): Promise<{
        handles: any;
        inputProof: Uint8Array;
    }>;
};
