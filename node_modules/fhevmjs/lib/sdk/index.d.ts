import { ZKInput } from './encrypt';
import { EIP712 } from './keypair';
export { getPublicKeyCallParams, getPublicKeyFromCoprocessor, getPublicKeyFromNetwork, getChainIdFromNetwork, } from './network';
type FhevmInstanceConfig = {
    chainId?: number;
    publicKey?: string;
    gatewayUrl?: string;
    networkUrl?: string;
    coprocessorUrl?: string;
    aclAddress?: string;
};
export type FhevmInstance = {
    createEncryptedInput: (contractAddress: string, userAddress: string) => ZKInput;
    generateKeypair: () => {
        publicKey: string;
        privateKey: string;
    };
    createEIP712: (publicKey: string, contractAddress: string, userAddress?: string) => EIP712;
    reencrypt: (handle: bigint, privateKey: string, publicKey: string, signature: string, contractAddress: string, userAddress: string) => Promise<bigint>;
    getPublicKey: () => string | null;
};
export declare const createInstance: (config: FhevmInstanceConfig) => Promise<FhevmInstance>;
